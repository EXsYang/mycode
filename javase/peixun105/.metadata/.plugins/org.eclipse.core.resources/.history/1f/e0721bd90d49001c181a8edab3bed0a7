package com.atguigu.team.service;

import com.atguigu.team.domain.Architect;
import com.atguigu.team.domain.Designer;
import com.atguigu.team.domain.Employee;
import com.atguigu.team.domain.Equipment;
import com.atguigu.team.domain.NoteBook;
import com.atguigu.team.domain.PC;
import com.atguigu.team.domain.Printer;
import com.atguigu.team.domain.Programmer;

public class NameListService {

	private Employee[] employee;

	public NameListService() {
		employee = new Employee[Data.EMPLOYEES.length];// 创建对象数组，存放员工信息
		int type;// 员工类型

		for (int i = 0; i < Data.EMPLOYEES.length; i++) {// 遍历Data中存放的信息，
			// 按照对应的类型，创建对应类型的对象； 在相应类型的对象中，依次填入数组对象中的属性。 Data中保存的数据类型是String；
			// 其中对应位置属性类型不一致的需要进行数据类型转换
			// 将生成的对象放入对象数组中

			type = Integer.parseInt(Data.EMPLOYEES[i][0]);
			int id = Integer.parseInt(Data.EMPLOYEES[i][1]);

			int age = Integer.parseInt(Data.EMPLOYEES[i][3]);
			double salary = Double.parseDouble(Data.EMPLOYEES[i][4]);

			switch (type) {// 按照对应的类型，创建对应类型的对象,用swich-case进行匹配

			case Data.EMPLOYEE:
				Equipment equipment = getEquipments(i);
				Employee e = new Employee(id, Data.EMPLOYEES[i][2], age, salary);
				employee[i] = e;
				break;
			case Data.PROGRAMMER:
				Programmer p = new Programmer(id, Data.EMPLOYEES[i][2], age, salary);
				employee[i] = p;
				break;
			case Data.DESIGNER:
				double bonus = Double.parseDouble(Data.EMPLOYEES[i][5]);
				Designer d = new Designer(id, Data.EMPLOYEES[i][2], age, salary, bonus);
				employee[i] = d;
				break;
			case Data.ARCHITECT:
				double bonus2 = Double.parseDouble(Data.EMPLOYEES[i][5]);
				int stock = Integer.parseInt(Data.EMPLOYEES[i][6]);
				Architect a = new Architect(id, Data.EMPLOYEES[i][2], age, salary, bonus2, stock);
				employee[i] = a;
				break;
			}

		}

	}

	public Equipment getEquipments(int index) {// 获取员工所用的设备
		// 使用for循环遍历设备信息，并添加数据，使用switch-case进行类型匹配，
		// 生成对应的子类对象，将Data中的数据封装进对象的属性中
//		for (int i = 1; i < Data.EQUIPMENTS.length; i++) {
			int tapy = Integer.parseInt(Data.EQUIPMENTS[index][0]);
			switch (tapy) {
			case Data.PC:
				return new PC(Data.EQUIPMENTS[i][1], Data.EQUIPMENTS[index][2]);
			case Data.NOTEBOOK:
				double price = Double.parseDouble(Data.EQUIPMENTS[index][2]);
				return new NoteBook(Data.EQUIPMENTS[i][1], price);
			case Data.PRINTER:
				return new Printer(Data.EQUIPMENTS[i][1], Data.EQUIPMENTS[index][2]);
			}
		//}

	}

	public Employee[] getAllEmployees(Employee[] employee) {

		return employee;

	}

	public Employee getEmployee(int id) throws TeamException {
		if (id < 13 && id > 0) {

			return this.employee[id];
		} else {
			throw new TeamException("找不到指定的员工");
		}

	}

	public static void main(String[] args) {
		NameListService n = new NameListService();

	}
}
