package com.hspedu.regexp;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * @author 韩顺平
 * @version 1.0
 * 反向引用
 *
 */
public class RegExp12 {
    public static void main(String[] args) {

        String content = "h1234el9876lo33333 j12324-333999111a1551ck14 tom11 jack22 yyy12345 xxx";
        /**
         * User
         * (\\d)\\1{4} 解释
         * GPT
         * 正则表达式 (\\d)\\1{4} 在 Java 中用于匹配特定的数字模式。让我来解释各个部分的含义：
         *
         * (\\d)：这部分是一个捕获组。在 Java 的正则表达式中，双反斜杠 \\ 是必要的，因为在字符串中单个反斜杠是一个转义字符。
         *
         * \\d 表示任意一个数字（0-9）。
         * 括号 () 则表示这是一个捕获组，用于记住匹配到的这个数字。
         * \\1：这表示对前面定义的第一个捕获组的引用。在这个表达式中，它引用 (\\d) 捕获的那个数字。
         *
         * \\1 实际上就是说“再次匹配前面捕获组 (\\d) 匹配到的相同数字”。
         * {4}：这表示前面的表达式（在这个例子中是 \\1）应该连续重复 4 次。
         *
         * 综上所述，(\\d)\\1{4} 这个正则表达式匹配五个连续且相同的数字，如 "11111"、"22222" 等。这里，第一个数字由 (\\d) 捕获并记住，然后 \\1{4} 确保后面紧跟着四个与之相同的数字。
         *
         * User
         * 分组是从1开始吗
         * GPT
         * 是的，在正则表达式中，捕获组的编号是从 1 开始的。第一个捕获组是用第一个左括号 ( 开始的部分，第二个捕获组是用第二个左括号开始的部分，以此类推。这些捕获组可以在正则表达式中通过 \1, \2 等进行引用。
         *
         * 例如，在正则表达式 (a)(b)(c) 中：
         *
         * (a) 是第一个捕获组，可以通过 \1 引用。
         * (b) 是第二个捕获组，可以通过 \2 引用。
         * (c) 是第三个捕获组，可以通过 \3 引用。
         * 捕获组的编号基于左括号 ( 的出现顺序。值得注意的是，0 号捕获组（\0）通常代表整个正则表达式匹配的文本。
         *
         * User
         * 在Java中不是使用双斜杠吗？
         * GPT
         * 是的，您是对的。在 Java 中，由于反斜线 \ 是一个特殊字符，用作转义字符，所以在字符串中表示一个普通的反斜线时，需要使用两个反斜线 \\ 来表示。这个规则同样适用于正则表达式中的特殊字符。
         *
         * 例如，如果您想在 Java 的正则表达式中匹配一个数字，正则表达式中的 \d 会在 Java 字符串中表示为 \\d。同样，对于捕获组的引用，\1 在 Java 中需要写作 \\1。这是因为在 Java 字符串中，第一个反斜线用于转义第二个反斜线，从而生成一个字面量的反斜线字符。
         *
         * 举个例子：
         *
         * 正则表达式中的 (\\d)\\1{4} 在 Java 字符串中表示为：
         * java
         * Copy code
         * String regex = "(\\d)\\1{4}";
         * 在这个例子中，(\\d) 匹配一个数字，并将其作为第一个捕获组，\\1{4} 则表示与该捕获组匹配的相同数字连续出现四次。
         */
        //要匹配两个连续的相同数字 :  (\\d)\\1
        //String regStr = "(\\d)\\1";
        //要匹配五个连续的相同数字： (\\d)\\1{4}
        //String regStr = "(\\d)\\1{4}";
        //要匹配个位与千位相同，十位与百位相同的数 5225 , 1551  (\\d)(\\d)\\2\\1
        //String regStr = "(\\d)(\\d)\\2\\1";

        /**
         * 请在字符串中检索商品编号,形式如:12321-333999111 这样的号码,
         * 要求满足前面是一个五位数,然后一个-号,然后是一个九位数,连续的每三位要相同
         */
        String regStr = "\\d{5}-(\\d)\\1{2}(\\d)\\2{2}(\\d)\\3{2}";
        Pattern pattern = Pattern.compile(regStr);
        Matcher matcher = pattern.matcher(content);
        while (matcher.find()) {
            System.out.println("找到 " + matcher.group(0));
        }

    }
}
