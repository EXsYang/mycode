<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">


    <!--这里是spring配置文件-->

    <!--配置自动扫描的包-->
    <context:component-scan base-package="com.hspedu.web"/>

    <!--配置视图解析器[默认视图解析器]-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!--配置属性 prefix 和 suffix
         value="/WEB-INF/pages/" 中的第一个 斜杠 /  相当于指的是web项目的目录 (不是src下的web)
         同时 记得最后也有一个斜杠 表示的是一个目录 而不是一个文件
        -->
        <property name="prefix" value="/WEB-INF/pages/"/>
        <property name="suffix" value=".jsp"/>
        <!--调整优先级
        注意：
        如果先使用自定义视图解析器(即优先级高于默认视图解析器)解析 Handler目标方法中返回的视图名viewName
        如果在容器中没有找到对应的 View对象 会返回null,程序会返回到中央控制器执行下面的默认视图解析器

        如果先走的默认的视图解析器 对Handler 目标方法返回的viewName进行解析 ，如果没有找到对应的视图，
        不会再使用自定义视图解析器再走一圈视图解析了，
        因为默认的视图解析器解析不存在的viewName后 返回的不是null ,而是一个view对象 在中央控制器的逻辑中不会往下走了，
        而是浏览器直接报错 找不到对应的页面 返回404

        -->

        <!--
        中央控制器中 视图解析器的处理流程方法
        @Nullable
	    protected View resolveViewName(String viewName, @Nullable Map<String, Object> model,
			Locale locale, HttpServletRequest request) throws Exception {

		    if (this.viewResolvers != null) {
		    	for (ViewResolver viewResolver : this.viewResolvers) {
		       		View view = viewResolver.resolveViewName(viewName, locale);
		    		if (view != null) {
		    			return view;
		    		}
		    	}
	       }
	    	return null;
    	}
	-->
        <!--默认视图解析器 默认的优先级最低 int LOWEST_PRECEDENCE = 2147483647-->
        <property name="order" value="10"/>
    </bean>

    <!--
        老师解读
        1. 配置自定义视图解析器BeanNameViewResolver
        2. BeanNameViewResolver可以去解析我们自定义的视图
        3. 配置 属性 order, 表示视图解析器执行的顺序, 值越小, 优先级越高
        4. 属性 order 的默认值是最低优先级 ，值为 Integer.MAX_VALUE
           int LOWEST_PRECEDENCE = 2147483647
           上面的默认视图解析器的order 默认值也是这个值
    -->
    <bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
        <property name="order" value="99"/>
    </bean>

    <bean id="messageSource" class=
            "org.springframework.context.support.ResourceBundleMessageSource">
        <!-- 配置国际化文件名字
        如果你这样配的话，表示 messageSource 默认会到 src/i18nXXX.properties 去读取错误
        信息
        -->
        <property name="basename" value="i18n"></property>
    </bean>

    <!--配置文件上传需要的bean-->
    <bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
          id="multipartResolver"/>
    <!--下面这2种不好使 会报错：
     HTTP Status 400 - Required request part 'file' is not present
     所需的请求部分“文件”不存在
     -->
    <!--<bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver"/>-->
    <!--<bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver"-->
    <!--id="commonsMultipartResolver"/>-->
    <!--注意: 不写id 也会报错 配置时需要指定id=multipartResolver
    如果该bean写了id, id需要按照CommonsMultipartResolver实现的接口名首字母小写填写 否则报错
    因为CommonsMultipartResolver实例对象是按照接口名首字母小写注入的
    public class CommonsMultipartResolver extends CommonsFileUploadSupport
		implements MultipartResolver, ServletContextAware {
    -->

    <!--配置自定义拦截器-spring配置文件-->
    <mvc:interceptors>
        <!--
        1.第一种配置方式
        2.使用ref引用到对应的myInterceptor01
        3.这种方式，会拦截所有的目标方法
        -->
        <!--<ref bean="myInterceptor01"/>-->

        <!--
        1.第二种配置方式
        2. <mvc:mapping path="/hi"/> 指定要拦截的路径 因为是服务器端
        第一个斜杠会被解析成项目路径 "/springmvc/"  配置时不用带项目路径
        3. <ref bean="myInterceptor01"/> 指定对哪个拦截器进行配置
        -->
    <!--<mvc:interceptor>-->
    <!--    <mvc:mapping path="/hi"/>-->
    <!--    <ref bean="myInterceptor01"/>-->
    <!--</mvc:interceptor>-->

        <!--
        1.第3种配置方式
        2.<mvc:mapping path="/h*"/> 通配符方式 表示拦截 /h 打头的路径
        3. <mvc:exclude-mapping path="/hello"/>  /hello不拦截
        4.<ref bean="myInterceptor01"/> 指定对哪个拦截器进行配置
        -->
        <mvc:interceptor>
            <mvc:mapping path="/h*"/>
            <mvc:exclude-mapping path="/hello"/>
            <ref bean="myInterceptor01"/>
        </mvc:interceptor>

        <!--老师解读
               1.配置的第二个拦截器
               2.多个拦截器在执行时，是顺序执行
               要测试多个拦截器的执行流程 就需要用多个拦截器都拦截的目标方法进行测试
               这里的 hi方法 01,02拦截器都拦截
               -->
        <mvc:interceptor>
            <mvc:mapping path="/h*"/>
            <ref bean="myInterceptor02"/>
        </mvc:interceptor>
    </mvc:interceptors>


    <!--配置统一处理异常bean
    异常处理的优先级
    局部异常 > 全局异常 > SimpleMappingExceptionResolver > tomcat 默认机制
    -->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <!--如果这里拦截到了 就会根据视图解析器配置的前缀和后缀 去找
                /WEB-INF/pages/arrEx.jsp 页面
                -->
                <prop key="java.lang.ArrayIndexOutOfBoundsException">arrEx</prop>
                <prop key="java.lang.Exception">allEx</prop>
            </props>
        </property>
    </bean>



    <!--加入两个常规配置-->
    <!--支持SpringMVC的高级功能，比如JSR303校验，映射动态请求
    注意要引入的名称空间是：xmlns:mvc="http://www.springframework.org/schema/mvc"
    因为mvc:annotation-driven 引入时提示有好几个都叫这个 不要引错
    -->
    <mvc:annotation-driven></mvc:annotation-driven>
    <!--将springmvc不能处理的请求，交给tomcat处理，比如css,js-->
    <mvc:default-servlet-handler/>
</beans>