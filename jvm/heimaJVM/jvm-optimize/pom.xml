<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.7.12</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.itheima</groupId>
    <artifactId>jvm-optimize</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>jvm-optimize</name>
    <description>jvm-optimize</description>
    <properties>
        <java.version>8</java.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.12.0</version>
        </dependency>


        <!--
         这个依赖引入 Micrometer 的 Prometheus 导出器。
        io.micrometer:micrometer-registry-prometheus 依赖的作用是将 Micrometer 的指标导出到 Prometheus 格式。
         Micrometer 是一个用于度量应用程序指标的库，而 Prometheus 是一个强大的开源监控系统。
         这个依赖允许你将 Micrometer 收集到的指标（例如 CPU 使用率、内存使用率、HTTP 请求数等）以 Prometheus 能够理解和读取的格式进行导出。
        scope: runtime 说明这个依赖只在运行时需要，而在编译时不需要。这意味着该依赖在构建 JAR 包时不会被包含在内，
        只有在运行时应用程序需要使用 Micrometer 导出指标到 Prometheus 时才会使用该依赖。

        如何工作：
        Micrometer 收集指标: Micrometer 库会监控应用程序，收集各种指标数据。
        Prometheus 导出器: micrometer-registry-prometheus 依赖提供一个导出器，用于将 Micrometer 收集到的指标转换为 Prometheus 的格式。
        Prometheus 接收指标: Prometheus 服务可以从你的应用程序收集到的指标数据中获取数据。
        总结： 这个依赖使得 Micrometer 收集的指标能够被 Prometheus 监控系统使用，方便你监控应用程序的性能和运行状况。
         runtime 范围确保了只有在运行时才包含必要的组件，从而减小了构建 JAR 包的大小。

         测试接口：要测试的接口显示在http://localhost:8881/actuator的json数据中
         "prometheus":{"href":"http://localhost:8881/actuator/prometheus",
         即http://localhost:8881/actuator/prometheus
         -->
        <dependency>
            <!--这个micrometer指标在阿里云上是有现成的指标对应的，使用起来方便一些-->
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-registry-prometheus</artifactId>
            <scope>runtime</scope>
        </dependency>


        <!-- 这个依赖配置的作用是引入 Spring Boot 的 Actuator 模块，并排除掉 Spring Boot 默认的日志记录器 spring-boot-starter-logging。
        spring-boot-starter-actuator 依赖引入 Spring Boot Actuator。Actuator 模块提供了一个强大的工具集，
        用于监控和管理 Spring Boot 应用程序。它暴露了各种端点（endpoints），
        允许你通过 HTTP 访问应用程序的各种指标、健康状态、配置信息等。 这对于应用程序的诊断和监控至关重要。

        exclusions 标签 则排除掉了默认的日志记录器 spring-boot-starter-logging。 这意味着，
        你将不会使用 Spring Boot 默认的日志配置，你需要自己配置日志记录器。 你可能需要添加其他日志依赖（例如 Logback 或 SLF4j 等）。
        为什么排除默认日志记录器？
        通常，这样做是为了：
        自定义日志配置： 在 Actuator 中，可能需要自定义日志记录的方式，以符合项目特定的需求。
        整合其他日志框架： 可能需要使用 Logback 或其他日志框架，而 Actuator 仍依赖于默认的 spring-boot-starter-logging 可能会出现冲突。
        避免冲突： 防止 spring-boot-starter-logging 与项目中已有的日志依赖发生冲突。
        总结： 该配置引入 Actuator 模块，但强制你使用自己选择的日志记录器。 这种做法通常是为了获得更精细的日志控制，或者避免与其他日志框架冲突。 你通常需要在 application.properties 或 application.yml 文件中配置你选择的日志库。

        测试暴露了各种端口的地址：http://localhost:8881/actuator
        然后再根据上面测试端口中的json数据可以查看暴露出来的所有的beans的信息：http://localhost:8881/actuator/beans

         -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>

            <exclusions><!-- 去掉springboot默认配置 -->
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!--
                上面两个依赖组合使用（spring-boot-starter-actuator，micrometer-registry-prometheus）的效果是：
                将 Spring Boot Actuator 收集的指标以 Prometheus 格式导出，方便 Prometheus 监控系统进行监控和分析。

                更详细地解释：
                spring-boot-starter-actuator: 提供 Spring Boot Actuator 模块，它暴露了各种端点（endpoints），用于监控和管理应用程序的运行状况。 这些端点提供各种指标数据，例如 CPU 使用率、内存使用量、HTTP 请求数等。
                micrometer-registry-prometheus: 提供 Micrometer 的 Prometheus 导出器。 它将 Spring Boot Actuator 提供的指标数据转换为 Prometheus 能够理解的格式 (例如，文本形式的 Metrics)。
                组合使用效果：
                通过将这两个依赖组合使用，Spring Boot 应用程序能够将 Actuator 收集的指标数据，以 Prometheus 可以识别的格式输出。
                 这样，你就可以使用 Prometheus 来监控应用程序的性能，并进行可视化分析。
                简而言之： 你使用 Actuator 收集指标，使用 Micrometer 的 Prometheus 导出器将这些指标转换成 Prometheus 可以读取的格式，从而可以使用 Prometheus 的强大监控功能。
                -->




        <!-- springboot和arthas整合依赖 -->
        <dependency>
            <groupId>com.taobao.arthas</groupId>
            <artifactId>arthas-spring-boot-starter</artifactId>
            <!-- 版本和最新版本一致(也可以不一致)，arthas-tunnel-server-3.7.1-fatjar  -->
            <version>3.7.1</version>
        </dependency>

        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.30</version>
        </dependency>





        <dependency>
            <groupId>org.openjdk.jol</groupId>
            <artifactId>jol-core</artifactId>
            <version>0.9</version>
        </dependency>

        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>2.3.1</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.data</groupId>
            <artifactId>spring-data-commons</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi</artifactId>
            <version>4.1.2</version>
        </dependency>
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-ooxml</artifactId>
            <version>4.1.2</version>
        </dependency>

        <dependency>
            <groupId>cn.hutool</groupId>
            <artifactId>hutool-all</artifactId>
            <version>5.8.16</version>
        </dependency>


        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>easyexcel</artifactId>
            <version>3.3.2</version>
        </dependency>

        <dependency>
            <groupId>com.github.ben-manes.caffeine</groupId>
            <artifactId>caffeine</artifactId>
            <version>2.9.3</version>
        </dependency>

        <!--AMQP依赖，不包含RabbitMQ,只是提供整合
         spring-boot-starter-amqp 依赖 仅 提供了与 AMQP 消息代理交互的工具和配置。它 不包含 RabbitMQ 服务器软件本身。 你需要在服务器上安装和配置 RabbitMQ。
        -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-amqp</artifactId>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>

        </plugins>
    </build>

</project>
