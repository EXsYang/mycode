<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <!--
  解读:
  1. groupId、artifactId、version 就是maven项目的坐标
  2. packaging: 打包方式，默认是jar,因为当前是web项目，所以这里打包成war
  -->
  <groupId>com.hspedu</groupId>
  <artifactId>web-hello-maven</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>war</packaging>

  <name>web-hello-maven Maven Webapp</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <!--
  maven项目的属性，根据实际情况可以修改,默认的1.7会出现...不兼容.. 等情况，通常改为1.8
  -->
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <!--<maven.compiler.source>1.7</maven.compiler.source>-->
    <!--<maven.compiler.target>1.7</maven.compiler.target>-->
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
  </properties>

  <dependencies>


    <!-- 默认引入的jar,可以调整 -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>

    <!-- 需要使用 dependency 进行真正引入插件依赖后才可以在
    build-plugins-plugin 中使用 groupId、artifactId进行导入插件
    (如分布式项目hspliving->hspliving-commodity->pom.xml中的插件导入方式)

    在下面这里导入一下插件，即可解决默认情况下，没有导入过的插件jar
    pluginManagement-plugins中爆红问题，只要导入了一次，即使注销掉插件的导入<dependency>
    在build-pluginManagement-plugins-plugin 的插件也不会报错了，重点即是需要真正的导入过一次

    dependency中导入插件后，同时也可以在build-pluginManagement-plugins-plugin 标签下
    仅使用artifactId和version指定插件和插件的版本了
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
    -->
    <!--<dependency>-->
    <!--  <groupId>org.apache.maven.plugins</groupId>-->
    <!--  <artifactId>maven-resources-plugin</artifactId>-->
    <!--  <version>3.0.2</version>-->
    <!--</dependency>-->

    <!--<dependency>-->
    <!--  <groupId>org.apache.maven.plugins</groupId>-->
    <!--  <artifactId>maven-compiler-plugin</artifactId>-->
    <!--  <version>3.8.0</version>-->
    <!--</dependency>-->

    <!--<dependency>-->
    <!--  <groupId>org.apache.maven.plugins</groupId>-->
    <!--  <artifactId>maven-war-plugin</artifactId>-->
    <!--  <version>3.2.2</version>-->
    <!--</dependency>-->

    <!--<dependency>-->
    <!--  <groupId>org.apache.maven.plugins</groupId>-->
    <!--  <artifactId>maven-surefire-plugin</artifactId>-->
    <!--  <version>2.22.1</version>-->
    <!--</dependency>-->

  </dependencies>

  <!--默认引入的 maven 插件, 前面说过 mvn 的各种指令 compile/install/test 等都是由插件完成的 -->
  <build>
    <finalName>web-hello-maven</finalName>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
  <!--如果这里报错，是因为这里是在pluginManagement中，以前没有真正的导入过这个版本的插件依赖，
      需要在dependence中真正的导入过这个插件后idea才不会报红！！！-->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>

        <!--<plugin>-->
        <!--  <artifactId>maven-compiler-plugin</artifactId>-->
        <!--  <version>3.8.0</version>-->
        <!--</plugin>-->
        <!-- 编译代码 -->
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
          <!-- 指定 JDK 版本 -->
          <configuration>
            <source>1.8</source>
            <target>1.8</target>
          </configuration>
        </plugin>

        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
        </plugin>


        <!--<plugin>-->
        <!--  <artifactId>maven-war-plugin</artifactId>-->
        <!--  <version>3.2.2</version>-->
        <!--</plugin>-->

        <!-- 打包为 WAR 文件，专门为 Web 应用 -->
        <plugin>
          <artifactId>maven-war-plugin</artifactId>
          <version>3.2.2</version>
          <!-- 更多配置可以在这里添加 -->
        </plugin>

        <!-- 确保依赖安装到本地仓库 -->
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>

        <!-- 部署到远程仓库 -->
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
      </plugins>
    </pluginManagement>


  </build>


</project>
